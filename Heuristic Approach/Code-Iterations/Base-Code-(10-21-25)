{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOhH2r3Wb4FkgG7vZQrstxo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Luke-687/Simulating-Chemotaxis--Q-learning-and-Heuristic-/blob/main/Chemotaxis_Heuristic_(Base_Code).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N72lycTplgN3"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import random\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#s is for the steepness of the gradient\n",
        "def defineScene(xS,yS, s):\n",
        "  x = []\n",
        "  y = []\n",
        "  color = []\n",
        "  gradient = []\n",
        "  reward = []\n",
        "  #Consider 20x20 grid, source of chemical at (15,15) with a decrease in alpha by r^2\n",
        "  for i in range (0,xS+1):\n",
        "    for j in range (0,yS+1):\n",
        "      x.append(j)\n",
        "      y.append(i)\n",
        "      #distance based calculations:\n",
        "      distance = math.sqrt((i-(xS/2))**2+(j-(yS/2))**2)\n",
        "      if(distance <= 5):\n",
        "        color.append(\"green\")\n",
        "        if(not distance<=1):\n",
        "          gradient.append(1/(distance**s))\n",
        "          reward.append(10/(distance**s))\n",
        "        else:\n",
        "          gradient.append(1)\n",
        "          reward.append(50)\n",
        "      else:\n",
        "        color.append(\"green\")\n",
        "        gradient.append(0)\n",
        "        reward.append(-50)\n",
        "  return x, y, gradient, reward\n",
        "\n",
        "def calculate_velocity(posX, posY, rewards):\n",
        "  posX = int(posX)\n",
        "  posY = int(posY)\n",
        "  currentReward = rewards[posX+posY*20]\n",
        "  if(currentReward<0):\n",
        "    velocity = 4\n",
        "  else:\n",
        "    velocity = 1.5/currentReward\n",
        "  if(velocity>=4):\n",
        "    velocity = 4\n",
        "  return velocity\n",
        "\n",
        "def calculate_direction(currentX, currentY, pastR, currentR, currentDirection, p):\n",
        "\n",
        "  #Define the basic change in the direction\n",
        "  change=0\n",
        "  currentPos = math.sqrt((currentX-9.5)**2 + (currentY-9.5)**2)\n",
        "\n",
        "  if(not currentR==0 and not pastR==0):\n",
        "\n",
        "    if(currentPos<=5):\n",
        "\n",
        "      change = 360*(abs(pastR/currentR)**0.8)*((random.choice([-1,1])))\n",
        "      # print(\"Inside: \" + str(change))\n",
        "\n",
        "    else:\n",
        "\n",
        "      if(pastR>currentR):\n",
        "\n",
        "        if(abs(pastR)<abs(currentR)):\n",
        "          change = (180-180*(abs((pastR)/(currentR))**p))*((random.choice([-1,1,-1,-1,-1])))\n",
        "          # print(\"Outside: \" + str(change))\n",
        "\n",
        "        else:\n",
        "          change = (180-180*(abs((currentR)/(pastR))**p))*((random.choice([-1,1,-1,-1,-1])))\n",
        "          # print(\"Outside: \" + str(change))\n",
        "\n",
        "\n",
        "  newDirection = (currentDirection+change)%360\n",
        "  return (newDirection)\n",
        "\n",
        "def simulate (alpha, gamma, xS, yS,steps, steep):\n",
        "  #Define the initial parameters\n",
        "  velocity = 4\n",
        "  direction = random.randint(10,80)\n",
        "  #Starting position is some (x,y) outside of gradient\n",
        "  currentX = 0\n",
        "  currentY = 0\n",
        "  stepsToBeMade=steps\n",
        "  xG, yG, gradient, reward = defineScene(xS, yS, steep)\n",
        "  #This works as an adjustment to the direction recalculation\n",
        "  p=0.59\n",
        "  #This works as an adjustment to the alpha and gamma in updated rewards\n",
        "  test = 3.75\n",
        "\n",
        "  #Track x,y pos\n",
        "  x=[]\n",
        "  y=[]\n",
        "\n",
        "  pastReward = 0\n",
        "  for i in range(0, stepsToBeMade):\n",
        "    #Enter and calculate reward of values which are about to be moved on from\n",
        "    currentX = max(0, min(currentX, 19))\n",
        "    currentY = max(0, min(currentY, 19))\n",
        "    x.append(currentX)\n",
        "    y.append(currentY)\n",
        "\n",
        "    #Find new position, and new current reward\n",
        "    brownian = brownianMotion()\n",
        "    changeX = velocity * math.cos(direction*math.pi/180) + brownian[0]\n",
        "    changeY = velocity * math.sin(direction*math.pi/180) + brownian[1]\n",
        "    currentX = x[-1] + changeX\n",
        "    currentY = y[-1] + changeY\n",
        "    currentX = max(0, min(currentX, 19))\n",
        "    currentY = max(0, min(currentY, 19))\n",
        "    currentReward = pastReward + test*alpha*(reward[int(currentX+currentY*20)]+test*gamma*(reward[int(currentX+currentY*20)]-pastReward))\n",
        "\n",
        "    #Redifine velocity and direction for next steps\n",
        "    velocity = calculate_velocity(int(currentX), int(currentY), reward)\n",
        "    direction = calculate_direction(currentX, currentY, pastReward, currentReward, direction, p)\n",
        "    pastReward = currentReward\n",
        "  return x,y\n",
        "\n",
        "def brownianMotion():\n",
        "  result = [0,0]\n",
        "  xChange = random.random()/4\n",
        "  yChange = random.random()/4\n",
        "  for i in range(10):\n",
        "    xChange+= random.random()/100 * (-1**(random.randint(1,2)))\n",
        "    yChange+= random.random()/100 * (-1**(random.randint(1,2)))\n",
        "  result = [xChange, yChange]\n",
        "  return result"
      ],
      "metadata": {
        "id": "RgebAe96lnhk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Key values which can be alterred\n",
        "alpha = 0.99\n",
        "gamma = 0.99\n",
        "steepness = 0.75"
      ],
      "metadata": {
        "id": "leIA6jfglo_O"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
